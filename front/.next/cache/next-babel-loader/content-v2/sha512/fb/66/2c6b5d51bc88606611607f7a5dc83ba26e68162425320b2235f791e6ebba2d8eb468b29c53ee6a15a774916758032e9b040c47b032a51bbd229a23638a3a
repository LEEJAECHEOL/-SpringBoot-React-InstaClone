{"ast":null,"code":"\"use strict\";\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _user = require(\"../actions/user\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst initialState = {\n  isLoading: false,\n  loginError: null,\n  joinError: null,\n  principal: null\n};\nconst userSlice = (0, _toolkit.createSlice)({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logOut(state, action) {\n      state.data = null;\n    }\n\n  },\n  extraReducers: builder => builder // login request\n  .addCase(_user.login.pending, state => {\n    state.isLoading = true;\n  }) // login success\n  .addCase(_user.login.fulfilled, (state, action) => {\n    state.isLoading = false; // Router.push(\"/login\");\n  }) // login fail\n  .addCase(_user.login.rejected, (state, action) => {\n    state.isLoading = false;\n    state.loginError = action.payload;\n  }) // join request\n  .addCase(_user.join.pending, state => {\n    state.isLoading = true;\n  }) // join success\n  .addCase(_user.join.fulfilled, (state, action) => {\n    state.isLoading = false;\n\n    _router.default.push(\"/login\");\n  }) // join fail\n  .addCase(_user.join.rejected, (state, action) => {\n    state.isLoading = false;\n    state.joinError = action.payload;\n  })\n});\nmodule.exports = userSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/userSlice.js"],"names":["initialState","isLoading","loginError","joinError","principal","userSlice","name","reducers","logOut","state","action","data","extraReducers","builder","addCase","login","pending","fulfilled","rejected","payload","join","Router","push","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,UAAU,EAAE,IAFO;AAGnBC,EAAAA,SAAS,EAAE,IAHQ;AAKnBC,EAAAA,SAAS,EAAE;AALQ,CAArB;AAOA,MAAMC,SAAS,GAAG,0BAAY;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5BN,EAAAA,YAF4B;AAG5BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;AACD;;AAHO,GAHkB;AAQ5BC,EAAAA,aAAa,EAAGC,OAAD,IACbA,OAAO,CACL;AADK,GAEJC,OAFH,CAEWC,YAAMC,OAFjB,EAE2BP,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,GAJH,EAKE;AALF,GAMGa,OANH,CAMWC,YAAME,SANjB,EAM4B,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB,CAD2C,CAE3C;AACD,GATH,EAUE;AAVF,GAWGa,OAXH,CAWWC,YAAMG,QAXjB,EAW2B,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,IAAAA,KAAK,CAACP,UAAN,GAAmBQ,MAAM,CAACS,OAA1B;AACD,GAdH,EAeE;AAfF,GAgBGL,OAhBH,CAgBWM,WAAKJ,OAhBhB,EAgB0BP,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,GAlBH,EAmBE;AAnBF,GAoBGa,OApBH,CAoBWM,WAAKH,SApBhB,EAoB2B,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;;AACAoB,oBAAOC,IAAP,CAAY,QAAZ;AACD,GAvBH,EAwBE;AAxBF,GAyBGR,OAzBH,CAyBWM,WAAKF,QAzBhB,EAyB0B,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACzCD,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,IAAAA,KAAK,CAACN,SAAN,GAAkBO,MAAM,CAACS,OAAzB;AACD,GA5BH;AAT0B,CAAZ,CAAlB;AAwCAI,MAAM,CAACC,OAAP,GAAiBnB,SAAjB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { join, login } from \"../actions/user\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  loginError: null,\n  joinError: null,\n\n  principal: null,\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logOut(state, action) {\n      state.data = null;\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      // login request\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n      })\n      // login success\n      .addCase(login.fulfilled, (state, action) => {\n        state.isLoading = false;\n        // Router.push(\"/login\");\n      })\n      // login fail\n      .addCase(login.rejected, (state, action) => {\n        state.isLoading = false;\n        state.loginError = action.payload;\n      })\n      // join request\n      .addCase(join.pending, (state) => {\n        state.isLoading = true;\n      })\n      // join success\n      .addCase(join.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/login\");\n      })\n      // join fail\n      .addCase(join.rejected, (state, action) => {\n        state.isLoading = false;\n        state.joinError = action.payload;\n      }),\n});\n\nmodule.exports = userSlice;\n"]},"metadata":{},"sourceType":"script"}