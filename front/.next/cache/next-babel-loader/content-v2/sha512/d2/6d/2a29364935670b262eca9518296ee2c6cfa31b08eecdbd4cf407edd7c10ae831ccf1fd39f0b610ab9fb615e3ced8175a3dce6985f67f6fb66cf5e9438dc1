{"ast":null,"code":"\"use strict\";\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst initialState = {\n  isLoading: false,\n  isCommentLoading: false,\n  lastPage: false,\n  posts: []\n};\nconst postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder // commentPost request\n  .addCase(_post.commentPost.pending, (state, action) => {\n    // 다른 페이지를 갔다오면 posts를 초기화\n    if (action.meta.arg === 0) {\n      state.posts = [];\n    }\n\n    state.isCommentLoading = true;\n  }) // commentPost success\n  .addCase(_post.commentPost.fulfilled, (state, action) => {\n    state.isCommentLoading = false;\n  }) // commentPost fail\n  .addCase(_post.commentPost.rejected, (state, action) => {\n    state.isCommentLoading = false;\n  }) // get request\n  .addCase(_post.get.pending, (state, action) => {\n    // 다른 페이지를 갔다오면 posts를 초기화\n    if (action.meta.arg === 0) {\n      state.posts = [];\n    }\n\n    state.isLoading = true;\n  }) // get success\n  .addCase(_post.get.fulfilled, (state, action) => {\n    state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n\n    state.lastPage = action.payload.last;\n    state.isLoading = false;\n  }) // get fail\n  .addCase(_post.get.rejected, (state, action) => {\n    state.isLoading = false;\n  }) // post request\n  .addCase(_post.post.pending, (state, action) => {\n    state.isLoading = true;\n  }) // post success -> / 로 이동\n  .addCase(_post.post.fulfilled, (state, action) => {\n    state.isLoading = false;\n\n    _router.default.push(\"/\");\n  }) // post fail\n  .addCase(_post.post.rejected, (state, action) => {\n    state.isLoading = false;\n    alert(\"포스트 작성에 실패하였습니다.\");\n  })\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","isCommentLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","commentPost","pending","state","action","meta","arg","fulfilled","rejected","get","concat","payload","content","last","post","Router","push","alert","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,gBAAgB,EAAE,KAFC;AAGnBC,EAAAA,QAAQ,EAAE,KAHS;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,MAAMC,SAAS,GAAG,0BAAY;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5BN,EAAAA,YAF4B;AAG5BO,EAAAA,QAAQ,EAAE,EAHkB;AAI5BC,EAAAA,aAAa,EAAGC,OAAD,IACbA,OAAO,CACL;AADK,GAEJC,OAFH,CAEWC,kBAAYC,OAFvB,EAEgC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/C;AACA,QAAIA,MAAM,CAACC,IAAP,CAAYC,GAAZ,KAAoB,CAAxB,EAA2B;AACzBH,MAAAA,KAAK,CAACT,KAAN,GAAc,EAAd;AACD;;AACDS,IAAAA,KAAK,CAACX,gBAAN,GAAyB,IAAzB;AACD,GARH,EASE;AATF,GAUGQ,OAVH,CAUWC,kBAAYM,SAVvB,EAUkC,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACjDD,IAAAA,KAAK,CAACX,gBAAN,GAAyB,KAAzB;AACD,GAZH,EAaE;AAbF,GAcGQ,OAdH,CAcWC,kBAAYO,QAdvB,EAciC,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAChDD,IAAAA,KAAK,CAACX,gBAAN,GAAyB,KAAzB;AACD,GAhBH,EAiBE;AAjBF,GAkBGQ,OAlBH,CAkBWS,UAAIP,OAlBf,EAkBwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC;AACA,QAAIA,MAAM,CAACC,IAAP,CAAYC,GAAZ,KAAoB,CAAxB,EAA2B;AACzBH,MAAAA,KAAK,CAACT,KAAN,GAAc,EAAd;AACD;;AACDS,IAAAA,KAAK,CAACZ,SAAN,GAAkB,IAAlB;AACD,GAxBH,EAyBE;AAzBF,GA0BGS,OA1BH,CA0BWS,UAAIF,SA1Bf,EA0B0B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACzCD,IAAAA,KAAK,CAACT,KAAN,GAAcS,KAAK,CAACT,KAAN,CAAYgB,MAAZ,CAAmBN,MAAM,CAACO,OAAP,CAAeC,OAAlC,CAAd,CADyC,CACiB;;AAC1DT,IAAAA,KAAK,CAACV,QAAN,GAAiBW,MAAM,CAACO,OAAP,CAAeE,IAAhC;AACAV,IAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACD,GA9BH,EA+BE;AA/BF,GAgCGS,OAhCH,CAgCWS,UAAID,QAhCf,EAgCyB,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACxCD,IAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACD,GAlCH,EAmCE;AAnCF,GAoCGS,OApCH,CAoCWc,WAAKZ,OApChB,EAoCyB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,IAAAA,KAAK,CAACZ,SAAN,GAAkB,IAAlB;AACD,GAtCH,EAuCE;AAvCF,GAwCGS,OAxCH,CAwCWc,WAAKP,SAxChB,EAwC2B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,IAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;;AACAwB,oBAAOC,IAAP,CAAY,GAAZ;AACD,GA3CH,EA4CE;AA5CF,GA6CGhB,OA7CH,CA6CWc,WAAKN,QA7ChB,EA6C0B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACzCD,IAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACA0B,IAAAA,KAAK,CAAC,kBAAD,CAAL;AACD,GAhDH;AAL0B,CAAZ,CAAlB;AAwDAC,MAAM,CAACC,OAAP,GAAiBxB,SAAjB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { post, get, commentPost } from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  isCommentLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // commentPost request\n      .addCase(commentPost.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isCommentLoading = true;\n      })\n      // commentPost success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        state.isCommentLoading = false;\n      })\n      // commentPost fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentLoading = false;\n      })\n      // get request\n      .addCase(get.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // post request\n      .addCase(post.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // post success -> / 로 이동\n      .addCase(post.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // post fail\n      .addCase(post.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}