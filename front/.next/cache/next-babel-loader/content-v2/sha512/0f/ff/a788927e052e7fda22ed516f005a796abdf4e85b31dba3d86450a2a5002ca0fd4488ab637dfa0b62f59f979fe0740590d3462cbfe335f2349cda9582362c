{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/lee/Desktop/instaClone/front/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _user = require(\"../actions/user\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nvar initialState = {\n  isLoading: false,\n  loginError: null,\n  joinError: null,\n  principal: null\n};\nvar userSlice = (0, _toolkit.createSlice)({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    logOut: function logOut(state, action) {\n      state.principal = null;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    return builder // load request\n    .addCase(_user.load.pending, function (state, action) {\n      state.isLoading = true;\n    }) // load success\n    .addCase(_user.load.fulfilled, function (state, action) {\n      state.isLoading = false;\n      state.principal = action.payload;\n    }) // load fail -> 로그인 화면으로\n    .addCase(_user.load.rejected, function (state, action) {\n      state.isLoading = false;\n      alert(\"로그인 후 이용가능합니다.\");\n\n      _router[\"default\"].push(\"/login\");\n    }) // login request\n    .addCase(_user.login.pending, function (state, action) {\n      state.isLoading = true;\n      state.loginError = null;\n    }) // login success\n    .addCase(_user.login.fulfilled, function (state, action) {\n      state.isLoading = false;\n      state.loginError = null;\n\n      _router[\"default\"].push(\"/\");\n    }) // login fail\n    .addCase(_user.login.rejected, function (state, action) {\n      state.isLoading = false;\n      state.loginError = \"로그인 실패\";\n    }) // join request\n    .addCase(_user.join.pending, function (state, action) {\n      state.isLoading = true;\n    }) // join success\n    .addCase(_user.join.fulfilled, function (state, action) {\n      state.isLoading = false;\n\n      _router[\"default\"].push(\"/login\");\n    }) // join fail\n    .addCase(_user.join.rejected, function (state, action) {\n      state.isLoading = false;\n      state.joinError = action.payload;\n    });\n  }\n});\nmodule.exports = userSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/userSlice.js"],"names":["initialState","isLoading","loginError","joinError","principal","userSlice","name","reducers","logOut","state","action","extraReducers","builder","addCase","load","pending","fulfilled","payload","rejected","alert","Router","push","login","join","module","exports"],"mappings":";;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,UAAU,EAAE,IAFO;AAGnBC,EAAAA,SAAS,EAAE,IAHQ;AAKnBC,EAAAA,SAAS,EAAE;AALQ,CAArB;AAOA,IAAMC,SAAS,GAAG,0BAAY;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5BN,EAAAA,YAAY,EAAZA,YAF4B;AAG5BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MADQ,kBACDC,KADC,EACMC,MADN,EACc;AACpBD,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAlB;AACD;AAHO,GAHkB;AAQ5BO,EAAAA,aAAa,EAAE,uBAACC,OAAD;AAAA,WACbA,OAAO,CACL;AADK,KAEJC,OAFH,CAEWC,WAAKC,OAFhB,EAEyB,UAACN,KAAD,EAAQC,MAAR,EAAmB;AACxCD,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,KAJH,EAKE;AALF,KAMGY,OANH,CAMWC,WAAKE,SANhB,EAM2B,UAACP,KAAD,EAAQC,MAAR,EAAmB;AAC1CD,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,MAAAA,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACO,OAAzB;AACD,KATH,EAUE;AAVF,KAWGJ,OAXH,CAWWC,WAAKI,QAXhB,EAW0B,UAACT,KAAD,EAAQC,MAAR,EAAmB;AACzCD,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAkB,MAAAA,KAAK,CAAC,gBAAD,CAAL;;AACAC,yBAAOC,IAAP,CAAY,QAAZ;AACD,KAfH,EAgBE;AAhBF,KAiBGR,OAjBH,CAiBWS,YAAMP,OAjBjB,EAiB0B,UAACN,KAAD,EAAQC,MAAR,EAAmB;AACzCD,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACAQ,MAAAA,KAAK,CAACP,UAAN,GAAmB,IAAnB;AACD,KApBH,EAqBE;AArBF,KAsBGW,OAtBH,CAsBWS,YAAMN,SAtBjB,EAsB4B,UAACP,KAAD,EAAQC,MAAR,EAAmB;AAC3CD,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,MAAAA,KAAK,CAACP,UAAN,GAAmB,IAAnB;;AACAkB,yBAAOC,IAAP,CAAY,GAAZ;AACD,KA1BH,EA2BE;AA3BF,KA4BGR,OA5BH,CA4BWS,YAAMJ,QA5BjB,EA4B2B,UAACT,KAAD,EAAQC,MAAR,EAAmB;AAC1CD,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,MAAAA,KAAK,CAACP,UAAN,GAAmB,QAAnB;AACD,KA/BH,EAgCE;AAhCF,KAiCGW,OAjCH,CAiCWU,WAAKR,OAjChB,EAiCyB,UAACN,KAAD,EAAQC,MAAR,EAAmB;AACxCD,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,KAnCH,EAoCE;AApCF,KAqCGY,OArCH,CAqCWU,WAAKP,SArChB,EAqC2B,UAACP,KAAD,EAAQC,MAAR,EAAmB;AAC1CD,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;;AACAmB,yBAAOC,IAAP,CAAY,QAAZ;AACD,KAxCH,EAyCE;AAzCF,KA0CGR,OA1CH,CA0CWU,WAAKL,QA1ChB,EA0C0B,UAACT,KAAD,EAAQC,MAAR,EAAmB;AACzCD,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,MAAAA,KAAK,CAACN,SAAN,GAAkBO,MAAM,CAACO,OAAzB;AACD,KA7CH,CADa;AAAA;AARa,CAAZ,CAAlB;AAyDAO,MAAM,CAACC,OAAP,GAAiBpB,SAAjB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { join, login, load } from \"../actions/user\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  loginError: null,\n  joinError: null,\n\n  principal: null,\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logOut(state, action) {\n      state.principal = null;\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      // load request\n      .addCase(load.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // load success\n      .addCase(load.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.principal = action.payload;\n      })\n      // load fail -> 로그인 화면으로\n      .addCase(load.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"로그인 후 이용가능합니다.\");\n        Router.push(\"/login\");\n      })\n      // login request\n      .addCase(login.pending, (state, action) => {\n        state.isLoading = true;\n        state.loginError = null;\n      })\n      // login success\n      .addCase(login.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.loginError = null;\n        Router.push(\"/\");\n      })\n      // login fail\n      .addCase(login.rejected, (state, action) => {\n        state.isLoading = false;\n        state.loginError = \"로그인 실패\";\n      })\n      // join request\n      .addCase(join.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // join success\n      .addCase(join.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/login\");\n      })\n      // join fail\n      .addCase(join.rejected, (state, action) => {\n        state.isLoading = false;\n        state.joinError = action.payload;\n      }),\n});\n\nmodule.exports = userSlice;\n"]},"metadata":{},"sourceType":"script"}