{"ast":null,"code":"\"use strict\";\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _user = require(\"../actions/user\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst initialState = {\n  isLoading: false,\n  loginError: null,\n  joinError: null,\n  principal: null\n};\nconst userSlice = (0, _toolkit.createSlice)({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logOut(state, action) {\n      state.data = null;\n    }\n\n  },\n  extraReducers: builder => builder // load request\n  .addCase(_user.load.pending, state => {\n    state.isLoading = true;\n  }) // load success\n  .addCase(_user.load.fulfilled, (state, action) => {\n    state.isLoading = false;\n    state.principal = action.payload;\n  }) // load fail -> 로그인 화면으로\n  .addCase(_user.load.rejected, state => {\n    state.isLoading = false;\n\n    _router.default.push(\"/login\");\n  }) // login request\n  .addCase(_user.login.pending, state => {\n    state.isLoading = true;\n    state.loginError = null;\n  }) // login success\n  .addCase(_user.login.fulfilled, state => {\n    state.isLoading = false;\n    state.loginError = null;\n\n    _router.default.push(\"/\");\n  }) // login fail\n  .addCase(_user.login.rejected, state => {\n    state.isLoading = false;\n    state.loginError = \"로그인 실패\";\n  }) // join request\n  .addCase(_user.join.pending, state => {\n    state.isLoading = true;\n  }) // join success\n  .addCase(_user.join.fulfilled, state => {\n    state.isLoading = false;\n\n    _router.default.push(\"/login\");\n  }) // join fail\n  .addCase(_user.join.rejected, (state, action) => {\n    state.isLoading = false;\n    state.joinError = action.payload;\n  })\n});\nmodule.exports = userSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/userSlice.js"],"names":["initialState","isLoading","loginError","joinError","principal","userSlice","name","reducers","logOut","state","action","data","extraReducers","builder","addCase","load","pending","fulfilled","payload","rejected","Router","push","login","join","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,UAAU,EAAE,IAFO;AAGnBC,EAAAA,SAAS,EAAE,IAHQ;AAKnBC,EAAAA,SAAS,EAAE;AALQ,CAArB;AAOA,MAAMC,SAAS,GAAG,0BAAY;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5BN,EAAAA,YAF4B;AAG5BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;AACD;;AAHO,GAHkB;AAQ5BC,EAAAA,aAAa,EAAGC,OAAD,IACbA,OAAO,CACL;AADK,GAEJC,OAFH,CAEWC,WAAKC,OAFhB,EAE0BP,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,GAJH,EAKE;AALF,GAMGa,OANH,CAMWC,WAAKE,SANhB,EAM2B,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,IAAAA,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACQ,OAAzB;AACD,GATH,EAUE;AAVF,GAWGJ,OAXH,CAWWC,WAAKI,QAXhB,EAW2BV,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;;AACAmB,oBAAOC,IAAP,CAAY,QAAZ;AACD,GAdH,EAeE;AAfF,GAgBGP,OAhBH,CAgBWQ,YAAMN,OAhBjB,EAgB2BP,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACAQ,IAAAA,KAAK,CAACP,UAAN,GAAmB,IAAnB;AACD,GAnBH,EAoBE;AApBF,GAqBGY,OArBH,CAqBWQ,YAAML,SArBjB,EAqB6BR,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,IAAAA,KAAK,CAACP,UAAN,GAAmB,IAAnB;;AACAkB,oBAAOC,IAAP,CAAY,GAAZ;AACD,GAzBH,EA0BE;AA1BF,GA2BGP,OA3BH,CA2BWQ,YAAMH,QA3BjB,EA2B4BV,KAAD,IAAW;AAClCA,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,IAAAA,KAAK,CAACP,UAAN,GAAmB,QAAnB;AACD,GA9BH,EA+BE;AA/BF,GAgCGY,OAhCH,CAgCWS,WAAKP,OAhChB,EAgC0BP,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,GAlCH,EAmCE;AAnCF,GAoCGa,OApCH,CAoCWS,WAAKN,SApChB,EAoC4BR,KAAD,IAAW;AAClCA,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;;AACAmB,oBAAOC,IAAP,CAAY,QAAZ;AACD,GAvCH,EAwCE;AAxCF,GAyCGP,OAzCH,CAyCWS,WAAKJ,QAzChB,EAyC0B,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACzCD,IAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,IAAAA,KAAK,CAACN,SAAN,GAAkBO,MAAM,CAACQ,OAAzB;AACD,GA5CH;AAT0B,CAAZ,CAAlB;AAwDAM,MAAM,CAACC,OAAP,GAAiBpB,SAAjB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { join, login, load } from \"../actions/user\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  loginError: null,\n  joinError: null,\n\n  principal: null,\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logOut(state, action) {\n      state.data = null;\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      // load request\n      .addCase(load.pending, (state) => {\n        state.isLoading = true;\n      })\n      // load success\n      .addCase(load.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.principal = action.payload;\n      })\n      // load fail -> 로그인 화면으로\n      .addCase(load.rejected, (state) => {\n        state.isLoading = false;\n        Router.push(\"/login\");\n      })\n      // login request\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n        state.loginError = null;\n      })\n      // login success\n      .addCase(login.fulfilled, (state) => {\n        state.isLoading = false;\n        state.loginError = null;\n        Router.push(\"/\");\n      })\n      // login fail\n      .addCase(login.rejected, (state) => {\n        state.isLoading = false;\n        state.loginError = \"로그인 실패\";\n      })\n      // join request\n      .addCase(join.pending, (state) => {\n        state.isLoading = true;\n      })\n      // join success\n      .addCase(join.fulfilled, (state) => {\n        state.isLoading = false;\n        Router.push(\"/login\");\n      })\n      // join fail\n      .addCase(join.rejected, (state, action) => {\n        state.isLoading = false;\n        state.joinError = action.payload;\n      }),\n});\n\nmodule.exports = userSlice;\n"]},"metadata":{},"sourceType":"script"}