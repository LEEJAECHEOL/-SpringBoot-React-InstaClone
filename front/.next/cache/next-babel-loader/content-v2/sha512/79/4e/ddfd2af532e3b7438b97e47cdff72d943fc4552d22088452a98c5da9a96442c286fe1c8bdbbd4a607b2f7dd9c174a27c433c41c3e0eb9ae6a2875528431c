{"ast":null,"code":"\"use strict\";\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _concat2 = _interopRequireDefault(require(\"lodash/concat\"));\n\nvar _find2 = _interopRequireDefault(require(\"lodash/find\"));\n\nvar _remove2 = _interopRequireDefault(require(\"lodash/remove\"));\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  isLikePostLoading: false,\n  // like\n  isLikeDeleteLoading: false,\n  // unlike\n  lastPage: false,\n  posts: []\n};\nconst postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => builder // likePost request\n  .addCase(_post.likePost.pending, (state, action) => {\n    state.isCommentDeleteLoading = true;\n  }) // likePost success\n  .addCase(_post.likePost.fulfilled, (state, action) => {\n    state.isCommentDeleteLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.postId\n    });\n    (0, _remove2.default)(post.comments, {\n      id: action.payload.id\n    });\n  }) // likePost fail\n  .addCase(_post.likePost.rejected, (state, action) => {\n    state.isCommentDeleteLoading = false;\n  }) // commentDelete request\n  .addCase(_post.commentDelete.pending, (state, action) => {\n    state.isCommentDeleteLoading = true;\n  }) // commentDelete success\n  .addCase(_post.commentDelete.fulfilled, (state, action) => {\n    state.isCommentDeleteLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.postId\n    });\n    (0, _remove2.default)(post.comments, {\n      id: action.payload.id\n    });\n  }) // commentDelete fail\n  .addCase(_post.commentDelete.rejected, (state, action) => {\n    state.isCommentDeleteLoading = false;\n  }) // commentPost request\n  .addCase(_post.commentPost.pending, (state, action) => {\n    state.isCommentPostLoading = true;\n  }) // commentPost success\n  .addCase(_post.commentPost.fulfilled, (state, action) => {\n    state.isCommentPostLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.post.id\n    });\n    post.comments.unshift(action.payload);\n  }) // commentPost fail\n  .addCase(_post.commentPost.rejected, (state, action) => {\n    state.isCommentPostLoading = false;\n  }) // get request\n  .addCase(_post.get.pending, (state, action) => {\n    // 다른 페이지를 갔다오면 posts를 초기화\n    if (action.meta.arg === 0) {\n      state.posts = [];\n    }\n\n    state.isLoading = true;\n  }) // get success\n  .addCase(_post.get.fulfilled, (state, action) => {\n    state.posts = (0, _concat2.default)(state.posts, action.payload.content);\n    state.lastPage = action.payload.last;\n    state.isLoading = false;\n  }) // get fail\n  .addCase(_post.get.rejected, (state, action) => {\n    state.isLoading = false;\n  }) // post request\n  .addCase(_post.post.pending, (state, action) => {\n    state.isLoading = true;\n  }) // post success -> / 로 이동\n  .addCase(_post.post.fulfilled, (state, action) => {\n    state.isLoading = false;\n\n    _router.default.push(\"/\");\n  }) // post fail\n  .addCase(_post.post.rejected, (state, action) => {\n    state.isLoading = false;\n    alert(\"포스트 작성에 실패하였습니다.\");\n  })\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","isCommentPostLoading","isCommentDeleteLoading","isLikePostLoading","isLikeDeleteLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","likePost","pending","state","action","fulfilled","post","id","payload","postId","comments","rejected","commentDelete","commentPost","unshift","get","meta","arg","content","last","Router","push","alert","module","exports"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport _concat from \"lodash/concat\";\nimport _find from \"lodash/find\";\nimport _remove from \"lodash/remove\";\nimport {\n  post,\n  get,\n  commentPost,\n  commentDelete,\n  likePost,\n} from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  isLikePostLoading: false, // like\n  isLikeDeleteLoading: false, // unlike\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // likePost request\n      .addCase(likePost.pending, (state, action) => {\n        state.isCommentDeleteLoading = true;\n      })\n      // likePost success\n      .addCase(likePost.fulfilled, (state, action) => {\n        state.isCommentDeleteLoading = false;\n        const post = _find(state.posts, { id: action.payload.postId });\n        _remove(post.comments, { id: action.payload.id });\n      })\n      // likePost fail\n      .addCase(likePost.rejected, (state, action) => {\n        state.isCommentDeleteLoading = false;\n      })\n      // commentDelete request\n      .addCase(commentDelete.pending, (state, action) => {\n        state.isCommentDeleteLoading = true;\n      })\n      // commentDelete success\n      .addCase(commentDelete.fulfilled, (state, action) => {\n        state.isCommentDeleteLoading = false;\n        const post = _find(state.posts, { id: action.payload.postId });\n        _remove(post.comments, { id: action.payload.id });\n      })\n      // commentDelete fail\n      .addCase(commentDelete.rejected, (state, action) => {\n        state.isCommentDeleteLoading = false;\n      })\n      // commentPost request\n      .addCase(commentPost.pending, (state, action) => {\n        state.isCommentPostLoading = true;\n      })\n      // commentPost success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        state.isCommentPostLoading = false;\n        const post = _find(state.posts, { id: action.payload.post.id });\n        post.comments.unshift(action.payload);\n      })\n      // commentPost fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentPostLoading = false;\n      })\n      // get request\n      .addCase(get.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        state.posts = _concat(state.posts, action.payload.content);\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // post request\n      .addCase(post.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // post success -> / 로 이동\n      .addCase(post.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // post fail\n      .addCase(post.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}