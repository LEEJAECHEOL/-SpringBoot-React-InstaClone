{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { logInAPI } from \"../api/user\";\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.payload);\n    yield delay(1000);\n    yield put(loginSuccessAction(result.data[0]));\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: loginErrorACtion.type,\n      payload: {\n        error: \"로그인 에러\"\n      }\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(loginAction, logIn);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn)]);\n}","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","logInAPI","logIn","action","result","call","payload","loginSuccessAction","data","err","console","error","type","loginErrorACtion","watchLogIn","loginAction","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMC,IAAI,CAACJ,QAAD,EAAWE,MAAM,CAACG,OAAlB,CAAzB;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAACS,kBAAkB,CAACH,MAAM,CAACI,IAAP,CAAY,CAAZ,CAAD,CAAnB,CAAT;AACD,GAJD,CAIE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAMX,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEC,gBAAgB,CAACD,IADf;AAERN,MAAAA,OAAO,EAAE;AACPK,QAAAA,KAAK,EAAE;AADA;AAFD,KAAD,CAAT;AAMD;AACF;;AAED,UAAUG,UAAV,GAAuB;AACrB,QAAMf,UAAU,CAACgB,WAAD,EAAcb,KAAd,CAAhB;AACD;;AAED,eAAe,UAAUc,QAAV,GAAqB;AAClC,QAAMrB,GAAG,CAAC,CAACE,IAAI,CAACiB,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { logInAPI } from \"../api/user\";\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.payload);\n    yield delay(1000);\n    yield put(loginSuccessAction(result.data[0]));\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: loginErrorACtion.type,\n      payload: {\n        error: \"로그인 에러\",\n      },\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(loginAction, logIn);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn)]);\n}\n"]},"metadata":{},"sourceType":"module"}