{"ast":null,"code":"\"use strict\";\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst initialState = {\n  isLoading: false,\n  lastPage: false,\n  posts: []\n};\nconst postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder // get request\n  .addCase(_post.get.pending, (state, action) => {\n    console.log(action.meta.arg);\n    state.isLoading = true;\n  }) // get success\n  .addCase(_post.get.fulfilled, (state, action) => {\n    state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n\n    state.lastPage = action.payload.last;\n    state.isLoading = false;\n  }) // get fail\n  .addCase(_post.get.rejected, (state, action) => {\n    state.isLoading = false;\n  }) // save request\n  .addCase(_post.save.pending, (state, action) => {\n    state.isLoading = true;\n  }) // save success -> / 로 이동\n  .addCase(_post.save.fulfilled, (state, action) => {\n    state.isLoading = false;\n\n    _router.default.push(\"/\");\n  }) // save fail\n  .addCase(_post.save.rejected, (state, action) => {\n    state.isLoading = false;\n    alert(\"포스트 작성에 실패하였습니다.\");\n  })\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","get","pending","state","action","console","log","meta","arg","fulfilled","concat","payload","content","last","rejected","save","Router","push","alert","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,QAAQ,EAAE,KAFS;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,MAAMC,SAAS,GAAG,0BAAY;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5BL,EAAAA,YAF4B;AAG5BM,EAAAA,QAAQ,EAAE,EAHkB;AAI5BC,EAAAA,aAAa,EAAGC,OAAD,IACbA,OAAO,CACL;AADK,GAEJC,OAFH,CAEWC,UAAIC,OAFf,EAEwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAP,CAAYC,GAAxB;AACAL,IAAAA,KAAK,CAACX,SAAN,GAAkB,IAAlB;AACD,GALH,EAME;AANF,GAOGQ,OAPH,CAOWC,UAAIQ,SAPf,EAO0B,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACzCD,IAAAA,KAAK,CAACT,KAAN,GAAcS,KAAK,CAACT,KAAN,CAAYgB,MAAZ,CAAmBN,MAAM,CAACO,OAAP,CAAeC,OAAlC,CAAd,CADyC,CACiB;;AAC1DT,IAAAA,KAAK,CAACV,QAAN,GAAiBW,MAAM,CAACO,OAAP,CAAeE,IAAhC;AACAV,IAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACD,GAXH,EAYE;AAZF,GAaGQ,OAbH,CAaWC,UAAIa,QAbf,EAayB,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACxCD,IAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACD,GAfH,EAgBE;AAhBF,GAiBGQ,OAjBH,CAiBWe,WAAKb,OAjBhB,EAiByB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,IAAAA,KAAK,CAACX,SAAN,GAAkB,IAAlB;AACD,GAnBH,EAoBE;AApBF,GAqBGQ,OArBH,CAqBWe,WAAKN,SArBhB,EAqB2B,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,IAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;;AACAwB,oBAAOC,IAAP,CAAY,GAAZ;AACD,GAxBH,EAyBE;AAzBF,GA0BGjB,OA1BH,CA0BWe,WAAKD,QA1BhB,EA0B0B,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACzCD,IAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACA0B,IAAAA,KAAK,CAAC,kBAAD,CAAL;AACD,GA7BH;AAL0B,CAAZ,CAAlB;AAqCAC,MAAM,CAACC,OAAP,GAAiBzB,SAAjB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { save, get } from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // get request\n      .addCase(get.pending, (state, action) => {\n        console.log(action.meta.arg);\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // save request\n      .addCase(save.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // save success -> / 로 이동\n      .addCase(save.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // save fail\n      .addCase(save.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}