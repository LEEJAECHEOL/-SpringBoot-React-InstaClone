{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/lee/Desktop/instaClone/front/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nvar initialState = {\n  isLoading: false,\n  isCommentLoading: false,\n  lastPage: false,\n  posts: []\n};\nvar postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    return builder // commentPost request\n    .addCase(_post.commentPost.pending, function (state, action) {\n      state.isCommentLoading = true;\n    }) // commentPost success\n    .addCase(_post.commentPost.fulfilled, function (state, action) {\n      console.log(action.payload);\n      state.posts.filter(function (post) {\n        return post.id === action.payload.post.id;\n      }).comments = state.posts.filter(function (post) {\n        return post.id === action.payload.post.id;\n      }).comments.unshift(action.payload);\n      state.isCommentLoading = false;\n    }) // commentPost fail\n    .addCase(_post.commentPost.rejected, function (state, action) {\n      state.isCommentLoading = false;\n    }) // get request\n    .addCase(_post.get.pending, function (state, action) {\n      // 다른 페이지를 갔다오면 posts를 초기화\n      if (action.meta.arg === 0) {\n        state.posts = [];\n      }\n\n      state.isLoading = true;\n    }) // get success\n    .addCase(_post.get.fulfilled, function (state, action) {\n      state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n\n      state.lastPage = action.payload.last;\n      state.isLoading = false;\n    }) // get fail\n    .addCase(_post.get.rejected, function (state, action) {\n      state.isLoading = false;\n    }) // post request\n    .addCase(_post.post.pending, function (state, action) {\n      state.isLoading = true;\n    }) // post success -> / 로 이동\n    .addCase(_post.post.fulfilled, function (state, action) {\n      state.isLoading = false;\n\n      _router[\"default\"].push(\"/\");\n    }) // post fail\n    .addCase(_post.post.rejected, function (state, action) {\n      state.isLoading = false;\n      alert(\"포스트 작성에 실패하였습니다.\");\n    });\n  }\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","isCommentLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","commentPost","pending","state","action","fulfilled","console","log","payload","filter","post","id","comments","unshift","rejected","get","meta","arg","concat","content","last","Router","push","alert","module","exports"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { post, get, commentPost } from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  isCommentLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // commentPost request\n      .addCase(commentPost.pending, (state, action) => {\n        state.isCommentLoading = true;\n      })\n      // commentPost success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        console.log(action.payload);\n        state.posts.filter(\n          (post) => post.id === action.payload.post.id\n        ).comments = state.posts\n          .filter((post) => post.id === action.payload.post.id)\n          .comments.unshift(action.payload);\n        state.isCommentLoading = false;\n      })\n      // commentPost fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentLoading = false;\n      })\n      // get request\n      .addCase(get.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // post request\n      .addCase(post.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // post success -> / 로 이동\n      .addCase(post.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // post fail\n      .addCase(post.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}