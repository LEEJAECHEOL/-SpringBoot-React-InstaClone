{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/lee/Desktop/instaClone/front/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nvar initialState = {\n  isLoading: false,\n  isCommentLoading: false,\n  lastPage: false,\n  posts: []\n};\nvar postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    return builder // commentPost request\n    .addCase(_post.commentPost.pending, function (state, action) {\n      state.isCommentLoading = true;\n    }) // commentPost success\n    .addCase(_post.commentPost.fulfilled, function (state, action) {\n      // console.log(action.payload);\n      var data = state.posts.data;\n      console.log(data); // state.posts.filter(\n      //   (post) => post.id === action.payload.post.id\n      // ).comments = state.posts\n      //   .filter((post) => post.id === action.payload.post.id)\n      //   .comments.unshift(action.payload);\n      // state.isCommentLoading = false;\n    }) // commentPost fail\n    .addCase(_post.commentPost.rejected, function (state, action) {\n      state.isCommentLoading = false;\n    }) // get request\n    .addCase(_post.get.pending, function (state, action) {\n      // 다른 페이지를 갔다오면 posts를 초기화\n      if (action.meta.arg === 0) {\n        state.posts = [];\n      }\n\n      state.isLoading = true;\n    }) // get success\n    .addCase(_post.get.fulfilled, function (state, action) {\n      state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n\n      state.lastPage = action.payload.last;\n      state.isLoading = false;\n    }) // get fail\n    .addCase(_post.get.rejected, function (state, action) {\n      state.isLoading = false;\n    }) // post request\n    .addCase(_post.post.pending, function (state, action) {\n      state.isLoading = true;\n    }) // post success -> / 로 이동\n    .addCase(_post.post.fulfilled, function (state, action) {\n      state.isLoading = false;\n\n      _router[\"default\"].push(\"/\");\n    }) // post fail\n    .addCase(_post.post.rejected, function (state, action) {\n      state.isLoading = false;\n      alert(\"포스트 작성에 실패하였습니다.\");\n    });\n  }\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","isCommentLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","commentPost","pending","state","action","fulfilled","data","console","log","rejected","get","meta","arg","concat","payload","content","last","post","Router","push","alert","module","exports"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { post, get, commentPost } from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  isCommentLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // commentPost request\n      .addCase(commentPost.pending, (state, action) => {\n        state.isCommentLoading = true;\n      })\n      // commentPost success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        // console.log(action.payload);\n        const { data } = state.posts;\n        console.log(data);\n        // state.posts.filter(\n        //   (post) => post.id === action.payload.post.id\n        // ).comments = state.posts\n        //   .filter((post) => post.id === action.payload.post.id)\n        //   .comments.unshift(action.payload);\n        // state.isCommentLoading = false;\n      })\n      // commentPost fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentLoading = false;\n      })\n      // get request\n      .addCase(get.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // post request\n      .addCase(post.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // post success -> / 로 이동\n      .addCase(post.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // post fail\n      .addCase(post.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}