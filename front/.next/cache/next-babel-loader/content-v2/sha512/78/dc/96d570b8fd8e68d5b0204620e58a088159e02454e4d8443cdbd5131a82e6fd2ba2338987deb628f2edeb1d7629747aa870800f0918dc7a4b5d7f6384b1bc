{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lee/Desktop/instaClone/front/pages/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport FeedPost from \"../components/FeedPost\";\nimport { get } from \"../actions/post\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { LoadingDiv } from \"../style\";\n\nconst Home = () => {\n  const {\n    0: page,\n    1: setPage\n  } = useState(0);\n  const dispatch = useDispatch();\n  const {\n    lastPage,\n    posts,\n    isLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    dispatch(get(page)); // 페이지 진입 시 post데이터 가져오기\n  }, []); // 스크롤링\n\n  useEffect(() => {\n    function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 50) {\n        if (!lastPage && !isLoading) {\n          setPage(prev => prev + 1);\n          dispatch(get(page + 1));\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [lastPage, isLoading, posts, page]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppLayout, {\n      children: [posts.map(post => /*#__PURE__*/_jsxDEV(FeedPost, {\n        post: post\n      }, \"post-\" + post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)), isLoading ? /*#__PURE__*/_jsxDEV(LoadingDiv, {\n        children: /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/pages/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","AppLayout","FeedPost","get","LoadingOutlined","LoadingDiv","Home","page","setPage","dispatch","lastPage","posts","isLoading","state","post","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","prev","addEventListener","removeEventListener","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,UAA3B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAMW,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AAAEW,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,MAAiCZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAlD;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,QAAQ,CAACN,GAAG,CAACI,IAAD,CAAJ,CAAR,CADc,CACO;AACtB,GAFQ,EAEN,EAFM,CAAT,CALiB,CAQjB;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,aAASkB,QAAT,GAAoB;AAClB,UACEC,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,YAA9C,GACAF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,EAF1C,EAGE;AACA,YAAI,CAACX,QAAD,IAAa,CAACE,SAAlB,EAA6B;AAC3BJ,UAAAA,OAAO,CAAEc,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACAb,UAAAA,QAAQ,CAACN,GAAG,CAACI,IAAI,GAAG,CAAR,CAAJ,CAAR;AACD;AACF;AACF;;AACDS,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCR,QAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCT,QAArC;AACD,KAFD;AAGD,GAhBQ,EAgBN,CAACL,QAAD,EAAWE,SAAX,EAAsBD,KAAtB,EAA6BJ,IAA7B,CAhBM,CAAT;AAiBA,sBACE;AAAA,2BACE,QAAC,SAAD;AAAA,iBACGI,KAAK,CAACc,GAAN,CAAWX,IAAD,iBACT,QAAC,QAAD;AAAkC,QAAA,IAAI,EAAEA;AAAxC,SAAe,UAAUA,IAAI,CAACY,EAA9B;AAAA;AAAA;AAAA;AAAA,cADD,CADH,EAIGd,SAAS,gBACR,QAAC,UAAD;AAAA,+BACE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADQ,GAIN,IARN;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAcD,CAxCD;;AA0CA,eAAeN,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport FeedPost from \"../components/FeedPost\";\nimport { get } from \"../actions/post\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { LoadingDiv } from \"../style\";\n\nconst Home = () => {\n  const [page, setPage] = useState(0);\n  const dispatch = useDispatch();\n  const { lastPage, posts, isLoading } = useSelector((state) => state.post);\n\n  useEffect(() => {\n    dispatch(get(page)); // 페이지 진입 시 post데이터 가져오기\n  }, []);\n  // 스크롤링\n  useEffect(() => {\n    function onScroll() {\n      if (\n        window.pageYOffset + document.documentElement.clientHeight >\n        document.documentElement.scrollHeight - 50\n      ) {\n        if (!lastPage && !isLoading) {\n          setPage((prev) => prev + 1);\n          dispatch(get(page + 1));\n        }\n      }\n    }\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [lastPage, isLoading, posts, page]);\n  return (\n    <>\n      <AppLayout>\n        {posts.map((post) => (\n          <FeedPost key={\"post-\" + post.id} post={post} />\n        ))}\n        {isLoading ? (\n          <LoadingDiv>\n            <LoadingOutlined />\n          </LoadingDiv>\n        ) : null}\n      </AppLayout>\n    </>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}