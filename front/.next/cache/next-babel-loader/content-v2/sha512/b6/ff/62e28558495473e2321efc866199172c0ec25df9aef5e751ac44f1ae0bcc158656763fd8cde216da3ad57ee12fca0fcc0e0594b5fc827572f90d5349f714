{"ast":null,"code":"\"use strict\";\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _concat2 = _interopRequireDefault(require(\"lodash/concat\"));\n\nvar _find2 = _interopRequireDefault(require(\"lodash/find\"));\n\nvar _remove2 = _interopRequireDefault(require(\"lodash/remove\"));\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  isLikePostLoading: false,\n  // like\n  isLikeDeleteLoading: false,\n  // unlike\n  isExploreGetLoading: false,\n  lastPage: false,\n  posts: []\n};\nconst postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => builder // exploreGet request\n  .addCase(_post.exploreGet.pending, (state, action) => {\n    // 다른 페이지를 갔다오면 posts를 초기화\n    state.isExploreGetLoading = true;\n  }) // exploreGet success\n  .addCase(_post.exploreGet.fulfilled, (state, action) => {\n    state.isExploreGetLoading = false;\n    console.log(action.payload);\n    state.posts = action.payload;\n  }) // exploreGet fail\n  .addCase(_post.exploreGet.rejected, (state, action) => {\n    state.isExploreGetLoading = false;\n  }) // likeDelete request\n  .addCase(_post.likeDelete.pending, (state, action) => {\n    state.isCommentDeleteLoading = true;\n  }) // likeDelete success\n  .addCase(_post.likeDelete.fulfilled, (state, action) => {\n    state.isCommentDeleteLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.postId\n    });\n    post.likeState = false;\n    post.likeCount = post.likeCount - 1;\n  }) // likeDelete fail\n  .addCase(_post.likeDelete.rejected, (state, action) => {\n    state.isCommentDeleteLoading = false;\n  }) // likePost request\n  .addCase(_post.likePost.pending, (state, action) => {\n    state.isCommentPostLoading = true;\n  }) // likePost success\n  .addCase(_post.likePost.fulfilled, (state, action) => {\n    state.isCommentPostLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.postId\n    });\n    post.likeState = true;\n    post.likeCount = post.likeCount + 1;\n  }) // likePost fail\n  .addCase(_post.likePost.rejected, (state, action) => {\n    state.isCommentPostLoading = false;\n  }) // commentDelete request\n  .addCase(_post.commentDelete.pending, (state, action) => {\n    state.isCommentDeleteLoading = true;\n  }) // commentDelete success\n  .addCase(_post.commentDelete.fulfilled, (state, action) => {\n    state.isCommentDeleteLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.postId\n    });\n    (0, _remove2.default)(post.comments, {\n      id: action.payload.id\n    });\n  }) // commentDelete fail\n  .addCase(_post.commentDelete.rejected, (state, action) => {\n    state.isCommentDeleteLoading = false;\n  }) // commentPost request\n  .addCase(_post.commentPost.pending, (state, action) => {\n    state.isCommentPostLoading = true;\n  }) // commentPost success\n  .addCase(_post.commentPost.fulfilled, (state, action) => {\n    state.isCommentPostLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.post.id\n    });\n    post.comments.unshift(action.payload);\n  }) // commentPost fail\n  .addCase(_post.commentPost.rejected, (state, action) => {\n    state.isCommentPostLoading = false;\n  }) // get request\n  .addCase(_post.get.pending, (state, action) => {\n    // 다른 페이지를 갔다오면 posts를 초기화\n    if (action.meta.arg === 0) {\n      state.posts = [];\n    }\n\n    state.isLoading = true;\n  }) // get success\n  .addCase(_post.get.fulfilled, (state, action) => {\n    state.posts = (0, _concat2.default)(state.posts, action.payload.content);\n    state.lastPage = action.payload.last;\n    state.isLoading = false;\n  }) // get fail\n  .addCase(_post.get.rejected, (state, action) => {\n    state.isLoading = false;\n  }) // post request\n  .addCase(_post.post.pending, (state, action) => {\n    state.isLoading = true;\n  }) // post success -> / 로 이동\n  .addCase(_post.post.fulfilled, (state, action) => {\n    state.isLoading = false;\n\n    _router.default.push(\"/\");\n  }) // post fail\n  .addCase(_post.post.rejected, (state, action) => {\n    state.isLoading = false;\n    alert(\"포스트 작성에 실패하였습니다.\");\n  })\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","isCommentPostLoading","isCommentDeleteLoading","isLikePostLoading","isLikeDeleteLoading","isExploreGetLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","exploreGet","pending","state","action","fulfilled","console","log","payload","rejected","likeDelete","post","id","postId","likeState","likeCount","likePost","commentDelete","comments","commentPost","unshift","get","meta","arg","content","last","Router","push","alert","module","exports"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport _concat from \"lodash/concat\";\nimport _find from \"lodash/find\";\nimport _remove from \"lodash/remove\";\nimport {\n  post,\n  get,\n  commentPost,\n  commentDelete,\n  likePost,\n  likeDelete,\n  exploreGet,\n} from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  isLikePostLoading: false, // like\n  isLikeDeleteLoading: false, // unlike\n  isExploreGetLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // exploreGet request\n      .addCase(exploreGet.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        state.isExploreGetLoading = true;\n      })\n      // exploreGet success\n      .addCase(exploreGet.fulfilled, (state, action) => {\n        state.isExploreGetLoading = false;\n        console.log(action.payload);\n        state.posts = action.payload;\n      })\n      // exploreGet fail\n      .addCase(exploreGet.rejected, (state, action) => {\n        state.isExploreGetLoading = false;\n      })\n      // likeDelete request\n      .addCase(likeDelete.pending, (state, action) => {\n        state.isCommentDeleteLoading = true;\n      })\n      // likeDelete success\n      .addCase(likeDelete.fulfilled, (state, action) => {\n        state.isCommentDeleteLoading = false;\n        const post = _find(state.posts, { id: action.payload.postId });\n        post.likeState = false;\n        post.likeCount = post.likeCount - 1;\n      })\n      // likeDelete fail\n      .addCase(likeDelete.rejected, (state, action) => {\n        state.isCommentDeleteLoading = false;\n      })\n      // likePost request\n      .addCase(likePost.pending, (state, action) => {\n        state.isCommentPostLoading = true;\n      })\n      // likePost success\n      .addCase(likePost.fulfilled, (state, action) => {\n        state.isCommentPostLoading = false;\n        const post = _find(state.posts, { id: action.payload.postId });\n        post.likeState = true;\n        post.likeCount = post.likeCount + 1;\n      })\n      // likePost fail\n      .addCase(likePost.rejected, (state, action) => {\n        state.isCommentPostLoading = false;\n      })\n      // commentDelete request\n      .addCase(commentDelete.pending, (state, action) => {\n        state.isCommentDeleteLoading = true;\n      })\n      // commentDelete success\n      .addCase(commentDelete.fulfilled, (state, action) => {\n        state.isCommentDeleteLoading = false;\n        const post = _find(state.posts, { id: action.payload.postId });\n        _remove(post.comments, { id: action.payload.id });\n      })\n      // commentDelete fail\n      .addCase(commentDelete.rejected, (state, action) => {\n        state.isCommentDeleteLoading = false;\n      })\n      // commentPost request\n      .addCase(commentPost.pending, (state, action) => {\n        state.isCommentPostLoading = true;\n      })\n      // commentPost success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        state.isCommentPostLoading = false;\n        const post = _find(state.posts, { id: action.payload.post.id });\n        post.comments.unshift(action.payload);\n      })\n      // commentPost fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentPostLoading = false;\n      })\n      // get request\n      .addCase(get.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        state.posts = _concat(state.posts, action.payload.content);\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // post request\n      .addCase(post.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // post success -> / 로 이동\n      .addCase(post.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // post fail\n      .addCase(post.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}