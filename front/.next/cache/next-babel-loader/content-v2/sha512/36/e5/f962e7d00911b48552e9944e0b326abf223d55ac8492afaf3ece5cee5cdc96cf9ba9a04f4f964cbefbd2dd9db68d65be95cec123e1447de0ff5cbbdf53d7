{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lee/Desktop/instaClone/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { logInAPI } from \"../api/user\";\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.payload);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return delay(1000);\n\n        case 6:\n          _context.next = 8;\n          return put(loginSuccessAction(result.data[0]));\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: loginErrorACtion.type,\n            payload: {\n              error: \"로그인 에러\"\n            }\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(loginAction, logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogIn)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/sagas/user.js"],"names":["logIn","watchLogIn","userSaga","all","delay","fork","put","takeLatest","axios","logInAPI","action","call","payload","result","loginSuccessAction","data","console","error","type","loginErrorACtion","loginAction"],"mappings":";;oDAIUA,K;qDAgBAC,U;qDAIeC,Q;;AAxBzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,SAAUT,KAAV,CAAgBU,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMC,IAAI,CAACF,QAAD,EAAWC,MAAM,CAACE,OAAlB,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAGI,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAME,GAAG,CAACQ,kBAAkB,CAACD,MAAM,CAACE,IAAP,CAAY,CAAZ,CAAD,CAAnB,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMIC,UAAAA,OAAO,CAACC,KAAR;AANJ;AAOI,iBAAMX,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAEC,gBAAgB,CAACD,IADf;AAERN,YAAAA,OAAO,EAAE;AACPK,cAAAA,KAAK,EAAE;AADA;AAFD,WAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUhB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACa,WAAD,EAAcpB,KAAd,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACJ,UAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { logInAPI } from \"../api/user\";\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.payload);\n    yield delay(1000);\n    yield put(loginSuccessAction(result.data[0]));\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: loginErrorACtion.type,\n      payload: {\n        error: \"로그인 에러\",\n      },\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(loginAction, logIn);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn)]);\n}\n"]},"metadata":{},"sourceType":"module"}