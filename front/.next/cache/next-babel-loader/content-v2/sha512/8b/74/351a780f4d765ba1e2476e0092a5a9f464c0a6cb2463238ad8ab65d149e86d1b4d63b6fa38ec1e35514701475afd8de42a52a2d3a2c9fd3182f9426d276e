{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/lee/Desktop/instaClone/front/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _concat2 = _interopRequireDefault(require(\"lodash/concat\"));\n\nvar _find2 = _interopRequireDefault(require(\"lodash/find\"));\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nvar initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  lastPage: false,\n  posts: []\n};\nvar postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    return builder // commentDelete request\n    .addCase(_post.commentPost.pending, function (state, action) {\n      state.isCommentDeleteLoading = true;\n    }) // commentDelete success\n    .addCase(_post.commentPost.fulfilled, function (state, action) {\n      state.isCommentDeleteLoading = false;\n    }) // commentDelete fail\n    .addCase(_post.commentPost.rejected, function (state, action) {\n      state.isCommentDeleteLoading = false;\n    }) // commentPost request\n    .addCase(_post.commentPost.pending, function (state, action) {\n      state.isCommentPostLoading = true;\n    }) // commentPost success\n    .addCase(_post.commentPost.fulfilled, function (state, action) {\n      state.isCommentPostLoading = false;\n      var post = (0, _find2[\"default\"])(state.posts, {\n        id: action.payload.post.id\n      });\n      post.comments.unshift(action.payload);\n    }) // commentPost fail\n    .addCase(_post.commentPost.rejected, function (state, action) {\n      state.isCommentPostLoading = false;\n    }) // get request\n    .addCase(_post.get.pending, function (state, action) {\n      // 다른 페이지를 갔다오면 posts를 초기화\n      if (action.meta.arg === 0) {\n        state.posts = [];\n      }\n\n      state.isLoading = true;\n    }) // get success\n    .addCase(_post.get.fulfilled, function (state, action) {\n      console.log(state.posts);\n      state.posts = (0, _concat2[\"default\"])(state.posts, action.payload.content);\n      state.lastPage = action.payload.last;\n      state.isLoading = false;\n    }) // get fail\n    .addCase(_post.get.rejected, function (state, action) {\n      state.isLoading = false;\n    }) // post request\n    .addCase(_post.post.pending, function (state, action) {\n      state.isLoading = true;\n    }) // post success -> / 로 이동\n    .addCase(_post.post.fulfilled, function (state, action) {\n      state.isLoading = false;\n\n      _router[\"default\"].push(\"/\");\n    }) // post fail\n    .addCase(_post.post.rejected, function (state, action) {\n      state.isLoading = false;\n      alert(\"포스트 작성에 실패하였습니다.\");\n    });\n  }\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","isCommentPostLoading","isCommentDeleteLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","commentPost","pending","state","action","fulfilled","rejected","post","id","payload","comments","unshift","get","meta","arg","console","log","content","last","Router","push","alert","module","exports"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport _concat from \"lodash/concat\";\nimport _find from \"lodash/find\";\nimport { post, get, commentPost, commentDelete } from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // commentDelete request\n      .addCase(commentPost.pending, (state, action) => {\n        state.isCommentDeleteLoading = true;\n      })\n      // commentDelete success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        state.isCommentDeleteLoading = false;\n      })\n      // commentDelete fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentDeleteLoading = false;\n      })\n      // commentPost request\n      .addCase(commentPost.pending, (state, action) => {\n        state.isCommentPostLoading = true;\n      })\n      // commentPost success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        state.isCommentPostLoading = false;\n        const post = _find(state.posts, { id: action.payload.post.id });\n        post.comments.unshift(action.payload);\n      })\n      // commentPost fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentPostLoading = false;\n      })\n      // get request\n      .addCase(get.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        console.log(state.posts);\n        state.posts = _concat(state.posts, action.payload.content);\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // post request\n      .addCase(post.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // post success -> / 로 이동\n      .addCase(post.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // post fail\n      .addCase(post.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}