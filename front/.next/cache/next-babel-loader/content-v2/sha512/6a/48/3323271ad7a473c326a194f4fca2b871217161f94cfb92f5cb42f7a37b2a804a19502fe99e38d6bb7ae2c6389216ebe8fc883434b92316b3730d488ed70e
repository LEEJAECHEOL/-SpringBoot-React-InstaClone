{"ast":null,"code":"\"use strict\";\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _concat2 = _interopRequireDefault(require(\"lodash/concat\"));\n\nvar _find2 = _interopRequireDefault(require(\"lodash/find\"));\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  lastPage: false,\n  posts: []\n};\nconst postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => builder // commentDelete request\n  .addCase(_post.commentDelete.pending, (state, action) => {\n    state.isCommentDeleteLoading = true;\n  }) // commentDelete success\n  .addCase(_post.commentDelete.fulfilled, (state, action) => {\n    state.isCommentDeleteLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.postId\n    });\n\n    _remove(post.comments, {\n      id: action.payload.id\n    });\n  }) // commentDelete fail\n  .addCase(_post.commentDelete.rejected, (state, action) => {\n    state.isCommentDeleteLoading = false;\n  }) // commentPost request\n  .addCase(_post.commentPost.pending, (state, action) => {\n    state.isCommentPostLoading = true;\n  }) // commentPost success\n  .addCase(_post.commentPost.fulfilled, (state, action) => {\n    state.isCommentPostLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.post.id\n    });\n    post.comments.unshift(action.payload);\n  }) // commentPost fail\n  .addCase(_post.commentPost.rejected, (state, action) => {\n    state.isCommentPostLoading = false;\n  }) // get request\n  .addCase(_post.get.pending, (state, action) => {\n    // 다른 페이지를 갔다오면 posts를 초기화\n    if (action.meta.arg === 0) {\n      state.posts = [];\n    }\n\n    state.isLoading = true;\n  }) // get success\n  .addCase(_post.get.fulfilled, (state, action) => {\n    console.log(state.posts);\n    state.posts = (0, _concat2.default)(state.posts, action.payload.content);\n    state.lastPage = action.payload.last;\n    state.isLoading = false;\n  }) // get fail\n  .addCase(_post.get.rejected, (state, action) => {\n    state.isLoading = false;\n  }) // post request\n  .addCase(_post.post.pending, (state, action) => {\n    state.isLoading = true;\n  }) // post success -> / 로 이동\n  .addCase(_post.post.fulfilled, (state, action) => {\n    state.isLoading = false;\n\n    _router.default.push(\"/\");\n  }) // post fail\n  .addCase(_post.post.rejected, (state, action) => {\n    state.isLoading = false;\n    alert(\"포스트 작성에 실패하였습니다.\");\n  })\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","isCommentPostLoading","isCommentDeleteLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","commentDelete","pending","state","action","fulfilled","post","id","payload","postId","_remove","comments","rejected","commentPost","unshift","get","meta","arg","console","log","content","last","Router","push","alert","module","exports"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport _concat from \"lodash/concat\";\nimport _find from \"lodash/find\";\nimport { post, get, commentPost, commentDelete } from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // commentDelete request\n      .addCase(commentDelete.pending, (state, action) => {\n        state.isCommentDeleteLoading = true;\n      })\n      // commentDelete success\n      .addCase(commentDelete.fulfilled, (state, action) => {\n        state.isCommentDeleteLoading = false;\n        const post = _find(state.posts, { id: action.payload.postId });\n        _remove(post.comments, { id: action.payload.id });\n      })\n      // commentDelete fail\n      .addCase(commentDelete.rejected, (state, action) => {\n        state.isCommentDeleteLoading = false;\n      })\n      // commentPost request\n      .addCase(commentPost.pending, (state, action) => {\n        state.isCommentPostLoading = true;\n      })\n      // commentPost success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        state.isCommentPostLoading = false;\n        const post = _find(state.posts, { id: action.payload.post.id });\n        post.comments.unshift(action.payload);\n      })\n      // commentPost fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentPostLoading = false;\n      })\n      // get request\n      .addCase(get.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        console.log(state.posts);\n        state.posts = _concat(state.posts, action.payload.content);\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // post request\n      .addCase(post.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // post success -> / 로 이동\n      .addCase(post.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // post fail\n      .addCase(post.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}