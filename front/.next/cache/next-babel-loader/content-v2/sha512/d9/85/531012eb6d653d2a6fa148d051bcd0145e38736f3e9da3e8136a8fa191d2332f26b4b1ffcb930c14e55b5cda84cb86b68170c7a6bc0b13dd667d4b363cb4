{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lee/Desktop/instaClone/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/lee/Desktop/instaClone/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from \"axios\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nvar config = {\n  headers: {\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  }\n};\nexport var login = createAsyncThunk(\"user/login\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, thunkAPI) {\n    var response, _iterator, _step, header;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.post(\"/login\", JSON.stringify(data));\n\n          case 2:\n            response = _context.sent;\n            console.dir(response.headers.authorization);\n            _iterator = _createForOfIteratorHelper(response.headers);\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                header = _step.value;\n                console.log(header); // if (header[0] === \"authorization\") {\n                //   localStorage.setItem(\"Authorization\", header[1]);\n                // }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            return _context.abrupt(\"return\", response.data);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var join = createAsyncThunk(\"user/join\", /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, thunkAPI) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.post(\"/auth/join\", JSON.stringify(data), config);\n\n          case 2:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/actions/user.js"],"names":["axios","createAsyncThunk","config","headers","login","data","thunkAPI","post","JSON","stringify","response","console","dir","authorization","header","log","join"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AADI,CAAf;AAMA,OAAO,IAAMC,KAAK,GAAGH,gBAAgB,CAAC,YAAD;AAAA,sEAAe,iBAAOI,IAAP,EAAaC,QAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC3BN,KAAK,CAACO,IAAN,CAAW,QAAX,EAAqBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAArB,CAD2B;;AAAA;AAC5CK,YAAAA,QAD4C;AAElDC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACP,OAAT,CAAiBU,aAA7B;AAFkD,mDAG/BH,QAAQ,CAACP,OAHsB;;AAAA;AAGlD,kEAAqC;AAA5BW,gBAAAA,MAA4B;AACnCH,gBAAAA,OAAO,CAACI,GAAR,CAAYD,MAAZ,EADmC,CAEnC;AACA;AACA;AACD;AARiD;AAAA;AAAA;AAAA;AAAA;;AAAA,6CAS3CJ,QAAQ,CAACL,IATkC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,IAA9B;AAYP,OAAO,IAAMW,IAAI,GAAGf,gBAAgB,CAAC,WAAD;AAAA,uEAAc,kBAAOI,IAAP,EAAaC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACzBN,KAAK,CAACO,IAAN,CAAW,YAAX,EAAyBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAzB,EAA+CH,MAA/C,CADyB;;AAAA;AAC1CQ,YAAAA,QAD0C;AAAA,8CAEzCA,QAAQ,CAACL,IAFgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,IAA7B","sourcesContent":["import axios from \"axios\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\n\nconst config = {\n  headers: {\n    \"Content-Type\": \"application/json; charset=utf-8\",\n  },\n};\n\nexport const login = createAsyncThunk(\"user/login\", async (data, thunkAPI) => {\n  const response = await axios.post(\"/login\", JSON.stringify(data));\n  console.dir(response.headers.authorization);\n  for (let header of response.headers) {\n    console.log(header);\n    // if (header[0] === \"authorization\") {\n    //   localStorage.setItem(\"Authorization\", header[1]);\n    // }\n  }\n  return response.data;\n});\n\nexport const join = createAsyncThunk(\"user/join\", async (data, thunkAPI) => {\n  const response = await axios.post(\"/auth/join\", JSON.stringify(data), config);\n  return response.data;\n});\n"]},"metadata":{},"sourceType":"module"}