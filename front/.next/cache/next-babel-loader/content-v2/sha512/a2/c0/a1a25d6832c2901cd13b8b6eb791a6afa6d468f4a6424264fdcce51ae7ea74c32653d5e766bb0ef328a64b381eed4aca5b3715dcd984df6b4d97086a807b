{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/lee/Desktop/instaClone/front/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _concat2 = _interopRequireDefault(require(\"lodash/concat\"));\n\nvar _find2 = _interopRequireDefault(require(\"lodash/find\"));\n\nvar _remove2 = _interopRequireDefault(require(\"lodash/remove\"));\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nvar initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  isLikePostLoading: false,\n  // like\n  isLikeDeleteLoading: false,\n  // unlike\n  isExploreGetLoading: false,\n  lastPage: false,\n  posts: []\n};\nvar postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    return builder // exploreGet request\n    .addCase(_post.exploreGet.pending, function (state, action) {\n      // 다른 페이지를 갔다오면 posts를 초기화\n      state.isExploreGetLoading = true;\n    }) // exploreGet success\n    .addCase(_post.exploreGet.fulfilled, function (state, action) {\n      state.isExploreGetLoading = false;\n      state.posts = action.payload;\n    }) // exploreGet fail\n    .addCase(_post.exploreGet.rejected, function (state, action) {\n      state.isExploreGetLoading = false;\n    }) // likeDelete request\n    .addCase(_post.likeDelete.pending, function (state, action) {\n      state.isCommentDeleteLoading = true;\n    }) // likeDelete success\n    .addCase(_post.likeDelete.fulfilled, function (state, action) {\n      state.isCommentDeleteLoading = false;\n      var post = (0, _find2[\"default\"])(state.posts, {\n        id: action.payload.postId\n      });\n      post.likeState = false;\n      post.likeCount = post.likeCount - 1;\n    }) // likeDelete fail\n    .addCase(_post.likeDelete.rejected, function (state, action) {\n      state.isCommentDeleteLoading = false;\n    }) // likePost request\n    .addCase(_post.likePost.pending, function (state, action) {\n      state.isCommentPostLoading = true;\n    }) // likePost success\n    .addCase(_post.likePost.fulfilled, function (state, action) {\n      state.isCommentPostLoading = false;\n      var post = (0, _find2[\"default\"])(state.posts, {\n        id: action.payload.postId\n      });\n      post.likeState = true;\n      post.likeCount = post.likeCount + 1;\n    }) // likePost fail\n    .addCase(_post.likePost.rejected, function (state, action) {\n      state.isCommentPostLoading = false;\n    }) // commentDelete request\n    .addCase(_post.commentDelete.pending, function (state, action) {\n      state.isCommentDeleteLoading = true;\n    }) // commentDelete success\n    .addCase(_post.commentDelete.fulfilled, function (state, action) {\n      state.isCommentDeleteLoading = false;\n      var post = (0, _find2[\"default\"])(state.posts, {\n        id: action.payload.postId\n      });\n      (0, _remove2[\"default\"])(post.comments, {\n        id: action.payload.id\n      });\n    }) // commentDelete fail\n    .addCase(_post.commentDelete.rejected, function (state, action) {\n      state.isCommentDeleteLoading = false;\n    }) // commentPost request\n    .addCase(_post.commentPost.pending, function (state, action) {\n      state.isCommentPostLoading = true;\n    }) // commentPost success\n    .addCase(_post.commentPost.fulfilled, function (state, action) {\n      state.isCommentPostLoading = false;\n      var post = (0, _find2[\"default\"])(state.posts, {\n        id: action.payload.post.id\n      });\n      post.comments.unshift(action.payload);\n    }) // commentPost fail\n    .addCase(_post.commentPost.rejected, function (state, action) {\n      state.isCommentPostLoading = false;\n    }) // get request\n    .addCase(_post.get.pending, function (state, action) {\n      // 다른 페이지를 갔다오면 posts를 초기화\n      if (action.meta.arg === 0) {\n        state.posts = [];\n      }\n\n      state.isLoading = true;\n    }) // get success\n    .addCase(_post.get.fulfilled, function (state, action) {\n      state.posts = (0, _concat2[\"default\"])(state.posts, action.payload.content);\n      state.lastPage = action.payload.last;\n      state.isLoading = false;\n    }) // get fail\n    .addCase(_post.get.rejected, function (state, action) {\n      state.isLoading = false;\n    }) // post request\n    .addCase(_post.post.pending, function (state, action) {\n      state.isLoading = true;\n    }) // post success -> / 로 이동\n    .addCase(_post.post.fulfilled, function (state, action) {\n      state.isLoading = false;\n\n      _router[\"default\"].push(\"/\");\n    }) // post fail\n    .addCase(_post.post.rejected, function (state, action) {\n      state.isLoading = false;\n      alert(\"포스트 작성에 실패하였습니다.\");\n    });\n  }\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","isCommentPostLoading","isCommentDeleteLoading","isLikePostLoading","isLikeDeleteLoading","isExploreGetLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","exploreGet","pending","state","action","fulfilled","payload","rejected","likeDelete","post","id","postId","likeState","likeCount","likePost","commentDelete","comments","commentPost","unshift","get","meta","arg","content","last","Router","push","alert","module","exports"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport _concat from \"lodash/concat\";\nimport _find from \"lodash/find\";\nimport _remove from \"lodash/remove\";\nimport {\n  post,\n  get,\n  commentPost,\n  commentDelete,\n  likePost,\n  likeDelete,\n  exploreGet,\n} from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  isCommentPostLoading: false,\n  isCommentDeleteLoading: false,\n  isLikePostLoading: false, // like\n  isLikeDeleteLoading: false, // unlike\n  isExploreGetLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // exploreGet request\n      .addCase(exploreGet.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        state.isExploreGetLoading = true;\n      })\n      // exploreGet success\n      .addCase(exploreGet.fulfilled, (state, action) => {\n        state.isExploreGetLoading = false;\n        state.posts = action.payload;\n      })\n      // exploreGet fail\n      .addCase(exploreGet.rejected, (state, action) => {\n        state.isExploreGetLoading = false;\n      })\n      // likeDelete request\n      .addCase(likeDelete.pending, (state, action) => {\n        state.isCommentDeleteLoading = true;\n      })\n      // likeDelete success\n      .addCase(likeDelete.fulfilled, (state, action) => {\n        state.isCommentDeleteLoading = false;\n        const post = _find(state.posts, { id: action.payload.postId });\n        post.likeState = false;\n        post.likeCount = post.likeCount - 1;\n      })\n      // likeDelete fail\n      .addCase(likeDelete.rejected, (state, action) => {\n        state.isCommentDeleteLoading = false;\n      })\n      // likePost request\n      .addCase(likePost.pending, (state, action) => {\n        state.isCommentPostLoading = true;\n      })\n      // likePost success\n      .addCase(likePost.fulfilled, (state, action) => {\n        state.isCommentPostLoading = false;\n        const post = _find(state.posts, { id: action.payload.postId });\n        post.likeState = true;\n        post.likeCount = post.likeCount + 1;\n      })\n      // likePost fail\n      .addCase(likePost.rejected, (state, action) => {\n        state.isCommentPostLoading = false;\n      })\n      // commentDelete request\n      .addCase(commentDelete.pending, (state, action) => {\n        state.isCommentDeleteLoading = true;\n      })\n      // commentDelete success\n      .addCase(commentDelete.fulfilled, (state, action) => {\n        state.isCommentDeleteLoading = false;\n        const post = _find(state.posts, { id: action.payload.postId });\n        _remove(post.comments, { id: action.payload.id });\n      })\n      // commentDelete fail\n      .addCase(commentDelete.rejected, (state, action) => {\n        state.isCommentDeleteLoading = false;\n      })\n      // commentPost request\n      .addCase(commentPost.pending, (state, action) => {\n        state.isCommentPostLoading = true;\n      })\n      // commentPost success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        state.isCommentPostLoading = false;\n        const post = _find(state.posts, { id: action.payload.post.id });\n        post.comments.unshift(action.payload);\n      })\n      // commentPost fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentPostLoading = false;\n      })\n      // get request\n      .addCase(get.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        state.posts = _concat(state.posts, action.payload.content);\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // post request\n      .addCase(post.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // post success -> / 로 이동\n      .addCase(post.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // post fail\n      .addCase(post.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}