{"ast":null,"code":"\"use strict\";\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _concat2 = _interopRequireDefault(require(\"lodash/concat\"));\n\nvar _find2 = _interopRequireDefault(require(\"lodash/find\"));\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst initialState = {\n  isLoading: false,\n  isCommentLoading: false,\n  lastPage: false,\n  posts: []\n};\nconst postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => builder // commentPost request\n  .addCase(_post.commentPost.pending, (state, action) => {\n    state.isCommentLoading = true;\n  }) // commentPost success\n  .addCase(_post.commentPost.fulfilled, (state, action) => {\n    state.isCommentLoading = false;\n    const post = (0, _find2.default)(state.posts, {\n      id: action.payload.post.id\n    });\n    post.comments.unshift(action.payload);\n  }) // commentPost fail\n  .addCase(_post.commentPost.rejected, (state, action) => {\n    state.isCommentLoading = false;\n  }) // get request\n  .addCase(_post.get.pending, (state, action) => {\n    // 다른 페이지를 갔다오면 posts를 초기화\n    if (action.meta.arg === 0) {\n      state.posts = [];\n    }\n\n    state.isLoading = true;\n  }) // get success\n  .addCase(_post.get.fulfilled, (state, action) => {\n    console.log(state.posts);\n    state.posts = (0, _concat2.default)(state.posts, action.payload.content);\n    state.lastPage = action.payload.last;\n    state.isLoading = false;\n  }) // get fail\n  .addCase(_post.get.rejected, (state, action) => {\n    state.isLoading = false;\n  }) // post request\n  .addCase(_post.post.pending, (state, action) => {\n    state.isLoading = true;\n  }) // post success -> / 로 이동\n  .addCase(_post.post.fulfilled, (state, action) => {\n    state.isLoading = false;\n\n    _router.default.push(\"/\");\n  }) // post fail\n  .addCase(_post.post.rejected, (state, action) => {\n    state.isLoading = false;\n    alert(\"포스트 작성에 실패하였습니다.\");\n  })\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","isCommentLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","commentPost","pending","state","action","fulfilled","post","id","payload","comments","unshift","rejected","get","meta","arg","console","log","content","last","Router","push","alert","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,gBAAgB,EAAE,KAFC;AAGnBC,EAAAA,QAAQ,EAAE,KAHS;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,MAAMC,SAAS,GAAG,0BAAY;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5BN,EAAAA,YAAY,EAAEA,YAFc;AAG5BO,EAAAA,QAAQ,EAAE,EAHkB;AAI5BC,EAAAA,aAAa,EAAGC,OAAD,IACbA,OAAO,CACL;AADK,GAEJC,OAFH,CAEWC,kBAAYC,OAFvB,EAEgC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/CD,IAAAA,KAAK,CAACX,gBAAN,GAAyB,IAAzB;AACD,GAJH,EAKE;AALF,GAMGQ,OANH,CAMWC,kBAAYI,SANvB,EAMkC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACjDD,IAAAA,KAAK,CAACX,gBAAN,GAAyB,KAAzB;AACA,UAAMc,IAAI,GAAG,oBAAMH,KAAK,CAACT,KAAZ,EAAmB;AAAEa,MAAAA,EAAE,EAAEH,MAAM,CAACI,OAAP,CAAeF,IAAf,CAAoBC;AAA1B,KAAnB,CAAb;AACAD,IAAAA,IAAI,CAACG,QAAL,CAAcC,OAAd,CAAsBN,MAAM,CAACI,OAA7B;AACD,GAVH,EAWE;AAXF,GAYGR,OAZH,CAYWC,kBAAYU,QAZvB,EAYiC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAChDD,IAAAA,KAAK,CAACX,gBAAN,GAAyB,KAAzB;AACD,GAdH,EAeE;AAfF,GAgBGQ,OAhBH,CAgBWY,UAAIV,OAhBf,EAgBwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC;AACA,QAAIA,MAAM,CAACS,IAAP,CAAYC,GAAZ,KAAoB,CAAxB,EAA2B;AACzBX,MAAAA,KAAK,CAACT,KAAN,GAAc,EAAd;AACD;;AACDS,IAAAA,KAAK,CAACZ,SAAN,GAAkB,IAAlB;AACD,GAtBH,EAuBE;AAvBF,GAwBGS,OAxBH,CAwBWY,UAAIP,SAxBf,EAwB0B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACzCW,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACT,KAAlB;AACAS,IAAAA,KAAK,CAACT,KAAN,GAAc,sBAAQS,KAAK,CAACT,KAAd,EAAqBU,MAAM,CAACI,OAAP,CAAeS,OAApC,CAAd;AACAd,IAAAA,KAAK,CAACV,QAAN,GAAiBW,MAAM,CAACI,OAAP,CAAeU,IAAhC;AACAf,IAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACD,GA7BH,EA8BE;AA9BF,GA+BGS,OA/BH,CA+BWY,UAAID,QA/Bf,EA+ByB,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACxCD,IAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACD,GAjCH,EAkCE;AAlCF,GAmCGS,OAnCH,CAmCWM,WAAKJ,OAnChB,EAmCyB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,IAAAA,KAAK,CAACZ,SAAN,GAAkB,IAAlB;AACD,GArCH,EAsCE;AAtCF,GAuCGS,OAvCH,CAuCWM,WAAKD,SAvChB,EAuC2B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,IAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;;AACA4B,oBAAOC,IAAP,CAAY,GAAZ;AACD,GA1CH,EA2CE;AA3CF,GA4CGpB,OA5CH,CA4CWM,WAAKK,QA5ChB,EA4C0B,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACzCD,IAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACA8B,IAAAA,KAAK,CAAC,kBAAD,CAAL;AACD,GA/CH;AAL0B,CAAZ,CAAlB;AAuDAC,MAAM,CAACC,OAAP,GAAiB5B,SAAjB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport _concat from \"lodash/concat\";\nimport _find from \"lodash/find\";\nimport { post, get, commentPost } from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  isCommentLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // commentPost request\n      .addCase(commentPost.pending, (state, action) => {\n        state.isCommentLoading = true;\n      })\n      // commentPost success\n      .addCase(commentPost.fulfilled, (state, action) => {\n        state.isCommentLoading = false;\n        const post = _find(state.posts, { id: action.payload.post.id });\n        post.comments.unshift(action.payload);\n      })\n      // commentPost fail\n      .addCase(commentPost.rejected, (state, action) => {\n        state.isCommentLoading = false;\n      })\n      // get request\n      .addCase(get.pending, (state, action) => {\n        // 다른 페이지를 갔다오면 posts를 초기화\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        console.log(state.posts);\n        state.posts = _concat(state.posts, action.payload.content);\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // post request\n      .addCase(post.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // post success -> / 로 이동\n      .addCase(post.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // post fail\n      .addCase(post.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}