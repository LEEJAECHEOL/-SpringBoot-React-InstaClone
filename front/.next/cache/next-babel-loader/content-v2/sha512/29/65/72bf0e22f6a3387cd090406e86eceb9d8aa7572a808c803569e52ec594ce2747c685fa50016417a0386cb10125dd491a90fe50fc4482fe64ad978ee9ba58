{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/lee/Desktop/instaClone/front/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _post = require(\"../actions/post\");\n\nvar _router = _interopRequireDefault(require(\"next/router\"));\n\nvar initialState = {\n  isLoading: false,\n  lastPage: false,\n  posts: []\n};\nvar postSlice = (0, _toolkit.createSlice)({\n  name: \"post\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    return builder // get request\n    .addCase(_post.get.pending, function (state, action) {\n      if (action.meta.arg === 0) {\n        state.posts = [];\n      }\n\n      state.isLoading = true;\n    }) // get success\n    .addCase(_post.get.fulfilled, function (state, action) {\n      state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n\n      state.lastPage = action.payload.last;\n      state.isLoading = false;\n    }) // get fail\n    .addCase(_post.get.rejected, function (state, action) {\n      state.isLoading = false;\n    }) // save request\n    .addCase(_post.save.pending, function (state, action) {\n      state.isLoading = true;\n    }) // save success -> / 로 이동\n    .addCase(_post.save.fulfilled, function (state, action) {\n      state.isLoading = false;\n\n      _router[\"default\"].push(\"/\");\n    }) // save fail\n    .addCase(_post.save.rejected, function (state, action) {\n      state.isLoading = false;\n      alert(\"포스트 작성에 실패하였습니다.\");\n    });\n  }\n});\nmodule.exports = postSlice;","map":{"version":3,"sources":["/Users/lee/Desktop/instaClone/front/reducers/postSlice.js"],"names":["initialState","isLoading","lastPage","posts","postSlice","name","reducers","extraReducers","builder","addCase","get","pending","state","action","meta","arg","fulfilled","concat","payload","content","last","rejected","save","Router","push","alert","module","exports"],"mappings":";;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,QAAQ,EAAE,KAFS;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,IAAMC,SAAS,GAAG,0BAAY;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5BL,EAAAA,YAAY,EAAZA,YAF4B;AAG5BM,EAAAA,QAAQ,EAAE,EAHkB;AAI5BC,EAAAA,aAAa,EAAE,uBAACC,OAAD;AAAA,WACbA,OAAO,CACL;AADK,KAEJC,OAFH,CAEWC,UAAIC,OAFf,EAEwB,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACvC,UAAIA,MAAM,CAACC,IAAP,CAAYC,GAAZ,KAAoB,CAAxB,EAA2B;AACzBH,QAAAA,KAAK,CAACT,KAAN,GAAc,EAAd;AACD;;AACDS,MAAAA,KAAK,CAACX,SAAN,GAAkB,IAAlB;AACD,KAPH,EAQE;AARF,KASGQ,OATH,CASWC,UAAIM,SATf,EAS0B,UAACJ,KAAD,EAAQC,MAAR,EAAmB;AACzCD,MAAAA,KAAK,CAACT,KAAN,GAAcS,KAAK,CAACT,KAAN,CAAYc,MAAZ,CAAmBJ,MAAM,CAACK,OAAP,CAAeC,OAAlC,CAAd,CADyC,CACiB;;AAC1DP,MAAAA,KAAK,CAACV,QAAN,GAAiBW,MAAM,CAACK,OAAP,CAAeE,IAAhC;AACAR,MAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACD,KAbH,EAcE;AAdF,KAeGQ,OAfH,CAeWC,UAAIW,QAff,EAeyB,UAACT,KAAD,EAAQC,MAAR,EAAmB;AACxCD,MAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACD,KAjBH,EAkBE;AAlBF,KAmBGQ,OAnBH,CAmBWa,WAAKX,OAnBhB,EAmByB,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxCD,MAAAA,KAAK,CAACX,SAAN,GAAkB,IAAlB;AACD,KArBH,EAsBE;AAtBF,KAuBGQ,OAvBH,CAuBWa,WAAKN,SAvBhB,EAuB2B,UAACJ,KAAD,EAAQC,MAAR,EAAmB;AAC1CD,MAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;;AACAsB,yBAAOC,IAAP,CAAY,GAAZ;AACD,KA1BH,EA2BE;AA3BF,KA4BGf,OA5BH,CA4BWa,WAAKD,QA5BhB,EA4B0B,UAACT,KAAD,EAAQC,MAAR,EAAmB;AACzCD,MAAAA,KAAK,CAACX,SAAN,GAAkB,KAAlB;AACAwB,MAAAA,KAAK,CAAC,kBAAD,CAAL;AACD,KA/BH,CADa;AAAA;AAJa,CAAZ,CAAlB;AAuCAC,MAAM,CAACC,OAAP,GAAiBvB,SAAjB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { save, get } from \"../actions/post\";\nimport Router from \"next/router\";\n\nconst initialState = {\n  isLoading: false,\n  lastPage: false,\n  posts: [],\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // get request\n      .addCase(get.pending, (state, action) => {\n        if (action.meta.arg === 0) {\n          state.posts = [];\n        }\n        state.isLoading = true;\n      })\n      // get success\n      .addCase(get.fulfilled, (state, action) => {\n        state.posts = state.posts.concat(action.payload.content); // 글 목록 담기\n        state.lastPage = action.payload.last;\n        state.isLoading = false;\n      })\n      // get fail\n      .addCase(get.rejected, (state, action) => {\n        state.isLoading = false;\n      })\n      // save request\n      .addCase(save.pending, (state, action) => {\n        state.isLoading = true;\n      })\n      // save success -> / 로 이동\n      .addCase(save.fulfilled, (state, action) => {\n        state.isLoading = false;\n        Router.push(\"/\");\n      })\n      // save fail\n      .addCase(save.rejected, (state, action) => {\n        state.isLoading = false;\n        alert(\"포스트 작성에 실패하였습니다.\");\n      }),\n});\n\nmodule.exports = postSlice;\n"]},"metadata":{},"sourceType":"script"}